using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace NoCarsAllowed.Model
{
    class TCatalog
    {
        string nameCatalog; // Наименование каталога
        int numCar; // Идентификатор общего количество автомобилей
        TCar[] cars; // Массив объектов автомобилей
        string mark, bodycar, country; int dayRelease, monthRelease, yearRelease, price;
        public TCar this[int i]
        {
            get
            {
                return cars[i];
            }
            set
            {
                cars[i] = new TCar(mark, bodycar, country, dayRelease, monthRelease, yearRelease, price);
            }
        }
        public int Length
        {
            get
            {
                return cars.Length;
            }
        }
        public TCar add
        {
            get
            {
                if (cars == null)
                {
                    cars = new TCar[1];
                    cars[0] = new TCar(mark, bodycar, country, dayRelease, monthRelease, yearRelease, price);
                    return cars[0];
                }
                else
                {
                    Array.Resize(ref cars, cars.Length + 1);
                    cars[cars.Length - 1] = new TCar(mark, bodycar, country, dayRelease, monthRelease, yearRelease, price);
                    return cars[cars.Length - 1];
                }
            }
        }
        public int remove
        {
            set
            {
                for (int i = value; i < cars.Length - 1; i++)
                    cars[i] = cars[i + 1];
                Array.Resize(ref cars, cars.Length - 1);
            }
        }
        public static void CreateBlank(string path)
        {
            Directory.CreateDirectory(path);
            File.Create(path + @"\list.txt").Close();
            Console.WriteLine("Blank save file was created");
            StreamReader srb = new StreamReader(path + @"\list.txt", Encoding.Default);
            srb.Close();
            StreamWriter replace = new StreamWriter(File.OpenWrite(path + @"\list.txt"));
            replace.WriteLine($"catalog_name \"Noname\"\nnum_of_cars \"0\"\nlanguage \"0\"");
            replace.Close();
        }
        public TCatalog()
        {
            try
            {
                if (!File.Exists($@"{Directory.GetParent(Directory.GetCurrentDirectory()).Parent.FullName}\save\list.txt"))
                    CreateBlank($@"{Directory.GetParent(Directory.GetCurrentDirectory()).Parent.FullName}\save\list.txt");
                nameCatalog = FindValue("catalog_name");
                numCar = Int32.Parse(FindValue("num_of_cars"));
                cars = new TCar[numCar];
                for (int i = 0; i < numCar; i++)
                {
                    mark = FindValue($"mark", i);
                    bodycar = FindValue($"bodycar", i);
                    country = FindValue($"country", i);
                    dayRelease = Int32.Parse(FindValue($"day", i));
                    monthRelease = Int32.Parse(FindValue($"month", i));
                    yearRelease = Int32.Parse(FindValue($"year", i));
                    price = Int32.Parse(FindValue($"price", i));
                    DateTime date = new DateTime(yearRelease, monthRelease, dayRelease);
                    cars[i] = new TCar(mark, bodycar, country, monthRelease, dayRelease, yearRelease, price);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
        public static string FindValue(string Name)
        {
            StreamReader sr = new StreamReader($@"{Directory.GetParent(Directory.GetCurrentDirectory()).Parent.FullName }\save\list.txt", Encoding.Default);
            string line = "";
            try
            {
                while ((line = sr.ReadLine()) != null)
                {
                    if (line.Contains(Name))
                    {
                        break;
                    }
                }
            }
            catch
            {
                return "0";
            }
            sr.Close();
            string result = "";
            string search = Name;
            for (int i = Name.Length; i < line.Length; i++)
            {
                if (search[i - 1] == '"')
                {
                    for (int j = search.Length; j < line.Length; j++)
                    {
                        if (line[j] == '"')
                        {
                            if (line[j - 1] == '"')
                                continue;
                            break;
                        }
                        result += line[j];
                    }
                    break;
                }
                search += line[i];
            }
            return result;
        }
        public static string FindValue(string Name, int id)
        {
            StreamReader sr = new StreamReader($@"{Directory.GetParent(Directory.GetCurrentDirectory()).Parent.FullName }\save\list.txt", Encoding.Default);
            string line = "";
            try
            {
                while ((line = sr.ReadLine()) != null)
                {
                    if (line.Contains(Name) & line.Contains($"[{id + 1}]"))
                    {
                        break;
                    }
                }
            }
            catch
            {
                return "0";
            }
            sr.Close();
            string result = "";
            string search = Name;
            for (int i = Name.Length; i < line.Length; i++)
            {
                if (search[i - 1] == '"')
                {
                    for (int j = search.Length; j < line.Length; j++)
                    {
                        if (line[j] == '"')
                        {
                            if (line[j - 1] == '"')
                                continue;
                            break;
                        }
                        result += line[j];
                    }
                    break;
                }
                search += line[i];
            }
            return result;
        }
        public static void ReplaceValue(string Name, int Value)
        {
            StreamReader sr = new StreamReader($@"{Directory.GetParent(Directory.GetCurrentDirectory()).Parent.FullName }\save\list.txt", Encoding.Default);
            string line = "";
            string neline = "";
            string result = "";
            try
            {
                while ((line = sr.ReadLine()) != null)
                {
                    if (line.Contains(Name))
                    {
                        for (int i = 0; i < line.Length; i++)
                        {
                            result += line[i];
                            if (line[i] == '"')
                            {
                                i++;
                                for (; i < line.Length; i++)
                                {
                                    if (line[i] == '"')
                                    {
                                        result += $"{Value}" + '"';
                                        break;
                                    }
                                }
                            }
                        }
                        neline += result + '\n';
                        continue;
                    }
                    neline += line + '\n';
                }
                sr.Close();
                StreamWriter replace = new StreamWriter(File.OpenWrite($@"{Directory.GetParent(Directory.GetCurrentDirectory()).Parent.FullName }\save\list.txt"));
                replace.WriteLine(neline);
                replace.Close();
            }
            catch
            {
            }
        }
        public string ShowCatalog()
        {
            string sc = ($"List of the cars in {nameCatalog} \n\n");
            if (numCar == 0)
                return $"There's no cars";
            for (int i = 0; i < cars.Length; i++)
            {
                for (int j = 0; j < cars.Length - 1; j++)
                {
                    if (cars[j + 1].ServiceTime() > cars[j].ServiceTime())
                        (cars[j], cars[j + 1]) = (cars[j + 1], cars[j]);
                }
            }
            for (int i = 0; i < cars.Length; i++) sc += $"{cars[i].ShowCar()}\n";
            sc += $"Average service time of cars is {AvgServiceTime()}\n-->";
            sc += ShowExpensive();
            return sc;
        }
        public string ShowExpensive()
        {
            try
            {
                int most = 0, mosti = 0;
                for (int i = 0; i < cars.Length; i++)
                {
                    if (cars[i].Price > most)
                    {
                        most = cars[i].Price;
                        mosti = i;
                    }
                }
                string se = $"The most expensive is \n\n{cars[mosti].ShowCar()}";
                return se;
            }
            catch (Exception ex)
            {
                string se = (ex.Message);
                return se;
            }
        }
        public int AvgServiceTime()
        {
            try
            {
                int sum = 0;
                for (int i = 0; i < cars.Length; i++)
                {
                    sum += cars[i].ServiceTime();
                }
                return (sum / cars.Length);
            }
            catch
            {
                return 0;
            }
        }
    }
}
